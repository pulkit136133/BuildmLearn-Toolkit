Only in zip30: crc32.o
Only in zip30: crc32_.o
diff -ur zip30-o/crc_i386.S zip30/crc_i386.S
--- zip30-o/crc_i386.S	2007-01-06 10:02:58.000000000 +0945
+++ zip30/crc_i386.S	2009-01-05 18:39:40.000000000 +0945
@@ -48,6 +48,7 @@
 /* This file is NOT used in conjunction with zlib, or when only creation of
  * the basic CRC_32_Table (for other purpose) is requested.
  */
+
 #if !defined(USE_ZLIB) && !defined(CRC_TABLE_ONLY)
 
 /* Preprocess with -DNO_UNDERLINE if your C compiler does not prefix
Only in zip30: crypt.o
Only in zip30: crypt_.o
Only in zip30: deflate.o
Only in zip30: fileio.o
Only in zip30: fileio_.o
Only in zip30: globals.o
Only in zip30: matchgcc.o
diff -ur zip30-o/os2/makefile.os2 zip30/os2/makefile.os2
--- zip30-o/os2/makefile.os2	2007-01-06 21:03:20.000000000 +0945
+++ zip30/os2/makefile.os2	2009-01-07 19:12:36.000000000 +0945
@@ -14,6 +14,7 @@
 
 # Supported 32-bit C Compilers (created programs run under OS/2 2.x only):
 # - GNU gcc (emx kit 0.9c or newer)
+# - GNU gcc (klibc 0.6.3 or higher )
 # - IBM C Set/2 or C Set++   - does not yet work with ASM code
 # - Watcom C/C++ 32-bit      - does not yet work with ASM code
 # - Borland C++              - no ASM code yet
@@ -91,7 +92,7 @@
 	@echo "where target is one of:"
 	@echo "   msc mscdos ibm ibmdyn ibmdebug ibmprof metaware borland"
 	@echo "   gcc gccdyn gcczlib gccdebug gccdos gccwin32 gccw32dyn"
-	@echo "   watcom watcom16 watcomdos watcom16dos pmodew"
+	@echo "   klibc watcom watcom16 watcomdos watcom16dos pmodew"
 
 # MS C 6.00 for OS/2, 16-bit
 msc:
@@ -327,6 +328,21 @@
 	OBJA="matchgcc.obj" \
 	DEF="os2/zip.def"
 
+# klibc 0.6.3, gcc, OMF format, dynamically linked C runtime 
+klibc:
+	$(MAKE) -f os2/makefile.os2 zips \
+	CC="gcc -Zomf -O3 -Wimplicit" \
+	CFLAGS="-DOS2 " \
+	AS="gcc -Zomf" \
+	ASFLAGS="-Di386" \
+	LDFLAGS="-o ./" \
+	LDFLAGS2="-Zomf -Zargs-wild -Zargs-resp  -s " \
+	OUT="-o" \
+	OBJ=".o" \
+	CRC32="crc_gcc" \
+	OBJA="matchgcc.o" \
+	DEF="os2/zip.def"
+
 # emx 0.9c, gcc, OMF format, dynamically linked C runtime and emx
 gccdyn:
 	$(MAKE) -f os2/makefile.os2 zips \
diff -ur zip30-o/os2/os2.c zip30/os2/os2.c
--- zip30-o/os2/os2.c	2005-08-27 19:45:04.000000000 +0845
+++ zip30/os2/os2.c	2009-01-07 19:29:14.000000000 +0945
@@ -15,6 +15,10 @@
 #include <direct.h>
 #endif
 
+#ifdef __EMX__ // YD
+#include <dirent.h>
+#endif
+
 /* Extra malloc() space in names for cutpath() */
 #define PAD 0
 #define PATH_END '/'
@@ -44,11 +48,157 @@
   return e == NULL ? (char *) NULL : e->d_name;
 }
 
+#define ONENAMELEN 255
+
+local int wild_recurse(whole, wildtail)
+char *whole;
+char *wildtail;
+{
+    DIR *dir;
+    char *subwild, *name, *newwhole = NULL, *glue = NULL, plug = 0, plug2;
+    extent newlen;
+    int amatch = 0, e = ZE_MISS;
+#ifdef __KLIBC__
+    linkput = 1;              /* 1=store symbolic links as such */
+#endif
+
+    if (!isshexp(wildtail)) {
+#ifdef LARGE_FILE_SUPPORT         
+	z_stat s;        	/* dummy buffer for stat() */
+#else
+	struct stat s;          /* dummy buffer for stat() */
+#endif
+
+        if (!LSSTAT(whole, &s))                 /* file exists ? */
+            return procname(whole, 0);
+        else
+            return ZE_MISS;                     /* woops, no wildcards! */
+    }
+
+    /* back up thru path components till existing dir found */
+    do {
+        name = wildtail + strlen(wildtail) - 1;
+        for (;;)
+            if (name-- <= wildtail || *name == PATH_END) {
+                subwild = name + 1;
+                plug2 = *subwild;
+                *subwild = 0;
+                break;
+            }
+        if (glue)
+            *glue = plug;
+        glue = subwild;
+        plug = plug2;
+        dir = opendir(whole);
+    } while (!dir && subwild > wildtail);
+    wildtail = subwild;                 /* skip past non-wild components */
+
+    if ((subwild = MBSCHR(wildtail + 1, PATH_END)) != NULL) {
+        /* this "+ 1" dodges the   ^^^ hole left by *glue == 0 */
+        *(subwild++) = 0;               /* wildtail = one component pattern */
+        newlen = strlen(whole) + strlen(subwild) + (ONENAMELEN + 2);
+    } else
+        newlen = strlen(whole) + (ONENAMELEN + 1);
+    if (!dir || ((newwhole = malloc(newlen)) == NULL)) {
+        if (glue)
+            *glue = plug;
+        e = dir ? ZE_MEM : ZE_MISS;
+        goto ohforgetit;
+    }
+    strcpy(newwhole, whole);
+    newlen = strlen(newwhole);
+    if (glue)
+        *glue = plug;                           /* repair damage to whole */
+    if (!isshexp(wildtail)) {
+        e = ZE_MISS;                            /* non-wild name not found */
+        goto ohforgetit;
+    }
+
+    while ((name = readd(dir)) != NULL) {
+        if (strcmp(name, ".") && strcmp(name, "..") &&
+            MATCH(wildtail, name, 0)) {
+            strcpy(newwhole + newlen, name);
+            if (subwild) {
+                name = newwhole + strlen(newwhole);
+                *(name++) = PATH_END;
+                strcpy(name, subwild);
+                e = wild_recurse(newwhole, name);
+            } else
+                e = procname(newwhole, 0);
+            newwhole[newlen] = 0;
+            if (e == ZE_OK)
+                amatch = 1;
+            else if (e != ZE_MISS)
+                break;
+        }
+    }
+
+  ohforgetit:
+    if (dir) closedir(dir);
+    if (subwild) *--subwild = PATH_END;
+    if (newwhole) free(newwhole);
+    if (e == ZE_MISS && amatch)
+        e = ZE_OK;
+    return e;
+}
+
 int wild(w)
 char *w;                /* path/pattern to match */
 /* If not in exclude mode, expand the pattern based on the contents of the
    file system.  Return an error code in the ZE_ class. */
 {
+    char *p;              /* path */
+    char *q;              /* diskless path */
+    int e;                /* result */
+
+    if (volume_label == 1) {
+      volume_label = 2;
+      label = getVolumeLabel((w != NULL && isascii((uch)w[0]) && w[1] == ':')
+                             ? to_up(w[0]) : '\0',
+                             &label_time, &label_mode, &label_utim);
+      if (label != NULL)
+        (void)newname(label, 0, 0);
+      if (w == NULL || (isascii((uch)w[0]) && w[1] == ':' && w[2] == '\0'))
+        return ZE_OK;
+      /* "zip -$ foo a:" can be used to force drive name */
+    }
+    /* special handling of stdin request */
+    if (strcmp(w, "-") == 0)   /* if compressing stdin */
+        return newname(w, 0, 0);
+
+    /* Allocate and copy pattern, leaving room to add "." if needed */
+    if ((p = malloc(strlen(w) + 2)) == NULL)
+        return ZE_MEM;
+    strcpy(p, w);
+
+    /* Normalize path delimiter as '/' */
+    for (q = p; *q; INCSTR(q))            /* use / consistently */
+        if (*q == '\\')
+            *q = '/';
+
+    /* Separate the disk part of the path */
+    if ((q = MBSCHR(p, ':')) != NULL) {
+        if (MBSCHR(++q, ':'))     /* sanity check for safety of wild_recurse */
+            return ZE_MISS;
+    } else
+        q = p;
+
+    /* Normalize bare disk names */
+    if (q > p && !*q)
+        strcpy(q, ".");
+
+    /* Here we go */
+    e = wild_recurse(p, q);
+    free((zvoid *)p);
+    return e;
+}
+
+
+int wild_os2(w)
+char *w;                /* path/pattern to match */
+/* If not in exclude mode, expand the pattern based on the contents of the
+   file system.  Return an error code in the ZE_ class. */
+{
   DIR *d;               /* stream for reading directory */
   char *e;              /* name found in directory */
   int r;                /* temporary variable */
@@ -194,7 +344,11 @@
   char *e;              /* pointer to name from readd() */
   int m;                /* matched flag */
   char *p;              /* path for recursion */
+#ifdef LARGE_FILE_SUPPORT         
+  z_stat s;        /* result of stat() */
+#else
   struct stat s;        /* result of stat() */
+#endif
   struct zlist far *z;  /* steps through zfiles list */
 
   if (n == NULL)        /* volume_label request in freshen|delete mode ?? */
@@ -372,7 +526,11 @@
 ulg filetime(f, a, n, t)
 char *f;                /* name of file to get info on */
 ulg *a;                 /* return value: file attributes */
+#ifdef __KLIBC__
+long long *n;           /* return value: file size */
+#else
 long *n;                /* return value: file size */
+#endif
 iztimes *t;             /* return value: access, modific. and creation times */
 /* If file *f does not exist, return 0.  Else, return the file's last
    modified date and time as an MSDOS date and time.  The date and
@@ -386,7 +544,11 @@
    If f is "-", use standard input as the file. If f is a device, return
    a file size of -1 */
 {
+#ifdef LARGE_FILE_SUPPORT
+  z_stat s;        /* results of stat() */
+#else
   struct stat s;        /* results of stat() */
+#endif
   char *name;
   ulg r;
   unsigned int len = strlen(f);
@@ -413,7 +575,11 @@
   if (isstdin) {
     /* it is common for some PC based compilers to
        fail with fstat() on devices or pipes */
+#ifdef LARGE_FILE_SUPPORT
+    if (zfstat(fileno(stdin), &s) != 0) {
+#else
     if (fstat(fileno(stdin), &s) != 0) {
+#endif
       s.st_mode = S_IFREG; s.st_size = -1L;
     }
     time(&s.st_ctime);
diff -ur zip30-o/os2/os2acl.c zip30/os2/os2acl.c
--- zip30-o/os2/os2acl.c	2004-12-04 07:58:38.000000000 +0945
+++ zip30/os2/os2acl.c	2009-01-05 18:33:14.000000000 +0945
@@ -67,6 +67,11 @@
 #define __32BIT__
 #endif
 
+#ifdef __KLIBC__
+#define _emx_32to16(x) _libc_32to16(x)
+#define _emx_16to32(x) _libc_16to32(x)
+#endif
+
 #ifdef __32BIT__
 typedef ULONG U_INT;
 #ifdef __EMX__
diff -ur zip30-o/os2/os2zip.c zip30/os2/os2zip.c
--- zip30-o/os2/os2zip.c	2005-08-27 19:48:08.000000000 +0845
+++ zip30/os2/os2zip.c	2009-01-07 09:40:56.000000000 +0945
@@ -20,6 +20,10 @@
 #  define __32BIT__
 #endif
 
+#if defined(__KLIBC__ )|| defined(__INNOTEK_LIBC__)
+#include <dirent.h>
+#endif
+
 #include "zip.h"
 
 #include <stdlib.h>
@@ -66,6 +70,7 @@
 
 #ifndef UTIL
 
+#ifndef __KLIBC__ 
 extern int noisy;
 
 #ifndef S_IFMT
@@ -270,6 +275,7 @@
     return NULL;
   }
 }
+#endif /* __KLIBC__ */
 
 /* FAT / HPFS detection */
 
@@ -387,7 +393,11 @@
 
   time(utim);
   *vtime = unix2dostime(utim);
+#ifndef __KLIBC__
   *vmode = _A_VOLID | _A_ARCHIVE;
+#else
+  *vmode = A_LABEL | A_ARCHIVE;
+#endif
 
   return (fi.vol.cch > 0) ? fi.vol.szVolLabel : NULL;
 }
diff -ur zip30-o/os2/os2zip.h zip30/os2/os2zip.h
--- zip30-o/os2/os2zip.h	2002-01-13 01:57:18.000000000 +0945
+++ zip30/os2/os2zip.h	2009-01-06 07:05:02.000000000 +0945
@@ -11,6 +11,8 @@
  */
 
 
+#ifndef __KLIBC__
+
 #define MAXNAMLEN  256
 #define MAXPATHLEN 256
 
@@ -21,7 +23,6 @@
 #define _A_DIR      0x10
 #define _A_ARCHIVE  0x20
 
-
 struct dirent
 {
   ino_t    d_ino;                   /* a bit of a farce */
@@ -65,6 +66,7 @@
 extern long telldir(DIR *);
 extern void closedir(DIR *);
 #define rewinddir(dirp) seekdir(dirp, 0L)
+#endif /* __KLIBC__ */
 
 int GetFileMode(char *name);
 ulg GetFileTime(char *name);
diff -ur zip30-o/os2/osdep.h zip30/os2/osdep.h
--- zip30-o/os2/osdep.h	1999-11-06 15:46:06.000000000 +0945
+++ zip30/os2/osdep.h	2009-01-07 19:28:52.000000000 +0945
@@ -33,6 +33,16 @@
 #  define MEMORY16
 #endif
 
+
+#if defined(__KLIBC__) 
+#   define LARGE_FILE_SUPPORT 
+#   define ZIP64_SUPPORT 1
+    typedef long long           zoff_t;
+    typedef unsigned long long  uzoff_t;
+    typedef struct stat z_stat;
+# define ZOFF_T_FORMAT_SIZE_PREFIX "ll"
+#endif
+
 #ifndef NO_ASM
 #  define ASMV
 /* #  define ASM_CRC */
Only in zip30: os2.o
Only in zip30: os2acl.o
Only in zip30: os2zip.o
Only in zip30: os2zip_.o
Only in zip30: t
diff -ur zip30-o/tailor.h zip30/tailor.h
--- zip30-o/tailor.h	2008-05-06 21:38:12.000000000 +0845
+++ zip30/tailor.h	2009-01-07 19:28:02.000000000 +0945
@@ -701,6 +701,21 @@
 
 # endif /* WIN32 */
 
+#if defined(OS2)
+#if defined(__KLIBC__) 
+#   define zstat stat
+#   define zfstat fstat
+#   define zlstat lstat
+     /* 64-bit fseeko */
+#   define zfseeko fseeko
+     /* 64-bit ftello */
+#   define zftello ftello
+    /* 64-bit fopen */
+#   define zfopen fopen
+#   define zfdopen fdopen
+#endif
+#endif /* OS2 */
+
 #else
   /* No Large File Support or default for 64-bit environment */
 
Only in zip30: test.zip
Only in zip30: trees.o
Only in zip30: ttyio.o
Only in zip30: util.o
Only in zip30: util_.o
Only in zip30: zia22226
Only in zip30: zip.exe
Only in zip30: zip.o
Only in zip30: zipcloak.exe
Only in zip30: zipcloak.o
Only in zip30: zipfile.o
Only in zip30: zipfile_.o
Only in zip30: zipnote.exe
Only in zip30: zipnote.o
Only in zip30: zipsplit.exe
Only in zip30: zipsplit.o
Only in zip30: zipup.o
